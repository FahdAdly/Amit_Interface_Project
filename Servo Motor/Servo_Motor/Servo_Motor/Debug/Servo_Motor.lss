
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000797  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036d  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000113  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include "SE_M.h"

int main()
{
   	SE_Inti();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <SE_Inti>
	Interrupt_Inti();
  70:	0e 94 72 00 	call	0xe4	; 0xe4 <Interrupt_Inti>
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <SE_Inti>:
#include "BIT_MATH.h"

void SE_Inti()
{
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  76:	8f b5       	in	r24, 0x2f	; 47
  78:	82 6a       	ori	r24, 0xA2	; 162
  7a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	8b 61       	ori	r24, 0x1B	; 27
  80:	8e bd       	out	0x2e, r24	; 46
	ICR1=5999;  //FPWM=50Hz (Period = 20ms Standard).
  82:	8f e6       	ldi	r24, 0x6F	; 111
  84:	97 e1       	ldi	r25, 0x17	; 23
  86:	97 bd       	out	0x27, r25	; 39
  88:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PIND5);   
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	81 bb       	out	0x11, r24	; 17
  90:	08 95       	ret

00000092 <Wait>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	81 ef       	ldi	r24, 0xF1	; 241
  96:	9b e2       	ldi	r25, 0x2B	; 43
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <Wait+0x6>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <Wait+0x10>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <SE_Move>:
{
	_delay_ms(900);
}
void SE_Move()
{
		OCR1A=315;   //180 degree
  a6:	8b e3       	ldi	r24, 0x3B	; 59
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
		Wait();
  ae:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
		OCR1A=215;   //0 degree
  b2:	87 ed       	ldi	r24, 0xD7	; 215
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	9b bd       	out	0x2b, r25	; 43
  b8:	8a bd       	out	0x2a, r24	; 42
		Wait();
  ba:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
		OCR1A=90;   //90 degree
  be:	8a e5       	ldi	r24, 0x5A	; 90
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9b bd       	out	0x2b, r25	; 43
  c4:	8a bd       	out	0x2a, r24	; 42
		Wait();
  c6:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
  ca:	08 95       	ret

000000cc <SE_Org_Position>:
}
void SE_Org_Position()
{
	OCR1A=215;   //0 degree
  cc:	87 ed       	ldi	r24, 0xD7	; 215
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	9b bd       	out	0x2b, r25	; 43
  d2:	8a bd       	out	0x2a, r24	; 42
	Wait();
  d4:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
  d8:	08 95       	ret

000000da <SE_Control>:
}
void SE_Control()
{
		SE_Move();	
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <SE_Move>
		SE_Org_Position();
  de:	0e 94 66 00 	call	0xcc	; 0xcc <SE_Org_Position>
  e2:	08 95       	ret

000000e4 <Interrupt_Inti>:
}
void Interrupt_Inti()
{
	DDRD &= ~(1 << PD2);
  e4:	81 b3       	in	r24, 0x11	; 17
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2);
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	82 bb       	out	0x12, r24	; 18
	MCUCR |= (1 << ISC01);
  f0:	85 b7       	in	r24, 0x35	; 53
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC00);
  f6:	85 b7       	in	r24, 0x35	; 53
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
  fc:	8b b7       	in	r24, 0x3b	; 59
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(SREG,7);
 102:	8f b7       	in	r24, 0x3f	; 63
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8f bf       	out	0x3f, r24	; 63
 108:	08 95       	ret

0000010a <INT0_ISR>:
}
 void INT0_ISR(void) {
	SE_Control();
 10a:	0e 94 6d 00 	call	0xda	; 0xda <SE_Control>
	GIFR |= (1 << INTF0);
 10e:	8a b7       	in	r24, 0x3a	; 58
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8a bf       	out	0x3a, r24	; 58
 114:	08 95       	ret

00000116 <__vector_1>:
}

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	INT0_ISR();
 138:	0e 94 85 00 	call	0x10a	; 0x10a <INT0_ISR>
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
